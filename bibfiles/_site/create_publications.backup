import os
import re
from pybtex.database.input import bibtex
import html

section_titles = {
    "sec:preprints": "Preprints",
    "sec:books": "Books",
    "sec:proceedings": "Proceedings and Book Chapters",
    "sec:journalpapers": "Journal Papers",
    "sec:theses": "Theses",
}

def latex_to_unicode(text):
    # Basic mapping of LaTeX accents to Unicode
    # Extend this dictionary based on your needs
    mappings = {
        "\\'{e}": "é",
        "\\~{u}": "ũ",
        # Add more mappings as needed
    }
    for latex, unicode_char in mappings.items():
        text = text.replace(latex, unicode_char)
    return text

def clean_bibtex_string(value):
    # Remove LaTeX curly brackets and convert to Unicode
    value = re.sub(r'{|}', '', value)
    value = latex_to_unicode(value)
    return html.escape(value)

def format_author_name(person):
    first = ' '.join(person.bibtex_first_names)
    last = ' '.join(person.last_names)
    full_name = f"{first} {last}"
    return clean_bibtex_string(full_name)

def format_authors(entry):
    authors = [format_author_name(person) for person in entry.persons.get('author', [])]
    if len(authors) > 2:
        return ', '.join(authors[:-1]) + ', and ' + authors[-1]
    return ' and '.join(authors)

def get_publication_info(entry):
    if entry.type == 'phdthesis':
        return "PhD thesis"
    elif entry.type == 'mastersthesis':
        return "Master's thesis"
    else:
        journal = entry.fields.get('journal', '')
        if not journal:
            journal = entry.fields.get('publisher', '')
        return clean_bibtex_string(journal)

def parse_bib_file(bib_file):
    parser = bibtex.Parser()
    return parser.parse_file(bib_file)

def generate_individual_html(entry, output_dir, title, key):
    bibtex_content = html.escape(entry.to_string('bibtex'))
    html_content = f"""---
layout: archive
title: "{title}"
permalink: /{key}.html
---

<pre>
{bibtex_content}
</pre>
"""
    with open(os.path.join(output_dir, f"{key}.html"), 'w') as html_file:
        html_file.write(html_content)

def generate_publications_md_and_html_files(bib_data, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    md_content = """---
title: Publications
permalink: /publications/
layout: archive
---

<script>
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(function() {
        alert('Copying to clipboard was successful!');
    }, function(err) {
        console.error('Could not copy text: ', err);
    });
}
</script>

"""

    current_section_opened = False
    for entry in bib_data.entries.values():
        if entry.type == 'section':
            if current_section_opened:
                md_content += "</ul>\n"
            section_key = entry.key.lower()
            section_title = section_titles.get(section_key, "Other")
            md_content += f"\n<h2>{section_title}</h2>\n<ul class=\"my-publication-list\">\n"
            current_section_opened = True
        else:
            title = clean_bibtex_string(entry.fields.get('title', 'No Title'))
            authors = format_authors(entry)
            year = entry.fields.get('year', 'No Year')
            publication_info = get_publication_info(entry)
            url = entry.fields.get('url', entry.fields.get('eprint', '#'))
            key = entry.key
            
            bibtex_string_js = html.escape(entry.to_string('bibtex').replace('\n', '\\n')).replace('"', '\\"')
            
            md_content += f"""<li><b>{title}</b><br />
{year}{f" - {publication_info}" if publication_info else ""}<br>
{authors}<br>
<a href="{url}">link</a>, <a href="/{key}.html">bibtex</a> (<button onclick='copyToClipboard(\"{bibtex_string_js}\")' style='padding:0;background:none;border:none;cursor:pointer;color:blue;text-decoration:underline;'>copy</button>)
</li>\n"""
            generate_individual_html(entry, output_dir, title, key)

    if current_section_opened:
        md_content += "</ul>\n"

    md_content += """
<script>
    window.onload = function() {
        let count = 0;
        const lists = document.getElementsByClassName('my-publication-list');
        for (let list of lists) {
            const items = list.getElementsByTagName('li');
            count += items.length;
        }
        count -= 2; // Subtract 2 for the last two theses

        // Enumerate items in reverse
        for (let list of lists) {
            const items = list.getElementsByTagName('li');
            for (let item of items) {
                if (count > 0) {
                    item.innerHTML = `<b>[${count}]</b> ` + item.innerHTML;
                }
                count--;
            }
        }
    }
</script>
"""

    with open(os.path.join(output_dir, "publications.md"), 'w') as md_file:
        md_file.write(md_content)

def main(bib_file, output_dir):
    bib_data = parse_bib_file(bib_file)
    generate_publications_md_and_html_files(bib_data, output_dir)
    print("Done generating publications.md and HTML files with copy functionality.")

bib_file = './main.bib'  # Path to your BibTeX file
output_dir = '.'  # Output directory for the HTML files and publications.md

main(bib_file, output_dir)
